// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssociateCensInitParameters struct {
}

type AssociateCensObservation struct {

	// The ID of CEN.
	CenID *string `json:"cenId,omitempty" tf:"cen_id,omitempty"`

	// The owner ID of CEN.
	CenOwnerID *string `json:"cenOwnerId,omitempty" tf:"cen_owner_id,omitempty"`

	// The status of CEN.
	CenStatus *string `json:"cenStatus,omitempty" tf:"cen_status,omitempty"`
}

type AssociateCensParameters struct {
}

type TagsInitParameters struct {

	// The Key of Tags.
	// The Key of Tags.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The Value of Tags.
	// The Value of Tags.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsObservation struct {

	// The Key of Tags.
	// The Key of Tags.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The Value of Tags.
	// The Value of Tags.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsParameters struct {

	// The Key of Tags.
	// The Key of Tags.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// The Value of Tags.
	// The Value of Tags.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type VPCInitParameters struct {

	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
	// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
	// +listType=set
	DNSServers []*string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// The description of the VPC.
	// The description of the VPC.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether to enable the IPv6 CIDR block of the VPC.
	// Specifies whether to enable the IPv6 CIDR block of the VPC.
	EnableIPv6 *bool `json:"enableIpv6,omitempty" tf:"enable_ipv6,omitempty"`

	// The IPv6 CIDR block of the VPC.
	// The IPv6 CIDR block of the VPC.
	IPv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block,omitempty"`

	// The ProjectName of the VPC.
	// The ProjectName of the VPC.
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// Tags.
	Tags []TagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// The name of the VPC.
	// The name of the VPC.
	VPCName *string `json:"vpcName,omitempty" tf:"vpc_name,omitempty"`
}

type VPCObservation struct {

	// The account ID of VPC.
	// The account ID of VPC.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The associate cen list of VPC.
	// The associate cen list of VPC.
	AssociateCens []AssociateCensObservation `json:"associateCens,omitempty" tf:"associate_cens,omitempty"`

	// The auxiliary cidr block list of VPC.
	// The auxiliary cidr block list of VPC.
	// +listType=set
	AuxiliaryCidrBlocks []*string `json:"auxiliaryCidrBlocks,omitempty" tf:"auxiliary_cidr_blocks,omitempty"`

	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// Creation time of VPC.
	// Creation time of VPC.
	CreationTime *string `json:"creationTime,omitempty" tf:"creation_time,omitempty"`

	// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
	// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
	// +listType=set
	DNSServers []*string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// The description of the VPC.
	// The description of the VPC.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether to enable the IPv6 CIDR block of the VPC.
	// Specifies whether to enable the IPv6 CIDR block of the VPC.
	EnableIPv6 *bool `json:"enableIpv6,omitempty" tf:"enable_ipv6,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IPv6 CIDR block of the VPC.
	// The IPv6 CIDR block of the VPC.
	IPv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block,omitempty"`

	// The nat gateway ID list of VPC.
	// The nat gateway ID list of VPC.
	// +listType=set
	NATGatewayIds []*string `json:"natGatewayIds,omitempty" tf:"nat_gateway_ids,omitempty"`

	// The ProjectName of the VPC.
	// The ProjectName of the VPC.
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// The route table ID list of VPC.
	// The route table ID list of VPC.
	// +listType=set
	RouteTableIds []*string `json:"routeTableIds,omitempty" tf:"route_table_ids,omitempty"`

	// The security group ID list of VPC.
	// The security group ID list of VPC.
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// Status of VPC.
	// Status of VPC.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The subnet ID list of VPC.
	// The subnet ID list of VPC.
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// Tags.
	Tags []TagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`

	// The update time of VPC.
	// The update time of VPC.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`

	// The ID of VPC.
	// The ID of VPC.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// The name of the VPC.
	// The name of the VPC.
	VPCName *string `json:"vpcName,omitempty" tf:"vpc_name,omitempty"`
}

type VPCParameters struct {

	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
	// +kubebuilder:validation:Optional
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
	// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
	// +kubebuilder:validation:Optional
	// +listType=set
	DNSServers []*string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// The description of the VPC.
	// The description of the VPC.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether to enable the IPv6 CIDR block of the VPC.
	// Specifies whether to enable the IPv6 CIDR block of the VPC.
	// +kubebuilder:validation:Optional
	EnableIPv6 *bool `json:"enableIpv6,omitempty" tf:"enable_ipv6,omitempty"`

	// The IPv6 CIDR block of the VPC.
	// The IPv6 CIDR block of the VPC.
	// +kubebuilder:validation:Optional
	IPv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block,omitempty"`

	// The ProjectName of the VPC.
	// The ProjectName of the VPC.
	// +kubebuilder:validation:Optional
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// Tags.
	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// The name of the VPC.
	// The name of the VPC.
	// +kubebuilder:validation:Optional
	VPCName *string `json:"vpcName,omitempty" tf:"vpc_name,omitempty"`
}

// VPCSpec defines the desired state of VPC
type VPCSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VPCInitParameters `json:"initProvider,omitempty"`
}

// VPCStatus defines the observed state of VPC.
type VPCStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VPC is the Schema for the VPCs API. Provides a resource to manage vpc
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,volcengine-terraform}
type VPC struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cidrBlock) || (has(self.initProvider) && has(self.initProvider.cidrBlock))",message="spec.forProvider.cidrBlock is a required parameter"
	Spec   VPCSpec   `json:"spec"`
	Status VPCStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCList contains a list of VPCs
type VPCList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPC `json:"items"`
}

// Repository type metadata.
var (
	VPC_Kind             = "VPC"
	VPC_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPC_Kind}.String()
	VPC_KindAPIVersion   = VPC_Kind + "." + CRDGroupVersion.String()
	VPC_GroupVersionKind = CRDGroupVersion.WithKind(VPC_Kind)
)

func init() {
	SchemeBuilder.Register(&VPC{}, &VPCList{})
}
